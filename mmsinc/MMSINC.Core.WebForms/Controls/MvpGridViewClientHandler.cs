using System.Web.UI;
using System.Web.UI.WebControls;

namespace MMSINC.Controls
{
#if DEBUG
    public class MvpGridViewClientHandler
#else
    internal class MvpGridViewClientHandler
#endif
    {
        #region Constants

        private struct CommandNames
        {
            public const string SELECT = "Select",
                                DELETE = "Delete",
                                UPDATE = "Update";
        }

        #endregion

        #region Private Members

        private readonly MvpGridView _gridView;
        private bool? _useClientSelect, _useClientDelete, _useClientUpdate;

        #endregion

        #region Properties

        public bool UseClientSelect
        {
            get
            {
                if (_useClientSelect == null)
                    _useClientSelect = (_gridView.AutoGenerateSelectButton &&
                                        OnClientSelect != null);
                return _useClientSelect.Value;
            }
        }

        public string OnClientSelect
        {
            get { return _gridView.OnClientSelect; }
        }

        public bool UseClientDelete
        {
            get
            {
                if (_useClientDelete == null)
                    _useClientDelete = (_gridView.AutoGenerateDeleteButton &&
                                        OnClientDelete != null);
                return _useClientDelete.Value;
            }
        }

        public string OnClientDelete
        {
            get { return _gridView.OnClientDelete; }
        }

        public bool UseClientUpdate
        {
            get
            {
                if (_useClientUpdate == null)
                {
                    _useClientUpdate = (_gridView.AutoGenerateEditButton &&
                                        OnClientUpdate != null);
                }

                return _useClientUpdate.Value;
            }
        }

        public string OnClientUpdate
        {
            get { return _gridView.OnClientUpdate; }
        }

        #endregion

        #region Constructors

        public MvpGridViewClientHandler(MvpGridView gridView)
        {
            _gridView = gridView;
        }

        #endregion

        #region Private Methods

        private static void AttachHandlerToButton(LinkButton btn, string handler)
        {
            btn.OnClientClick = handler;
        }

        private static void AttachClientCommandHandler(TableRow row, string commandName, string handler)
        {
            var btn = FindCommandButtonInRow(row, commandName);
            if (btn != null)
                AttachHandlerToButton(btn, handler);
        }

        private static LinkButton FindCommandButtonInControlCollection(ControlCollection ctrls, string commandName)
        {
            LinkButton ret;
            foreach (Control ctrl in ctrls)
            {
                ret = ctrl as LinkButton;
                if (ret == null && ctrl.Controls.Count > 0)
                    ret = FindCommandButtonInControlCollection(ctrl.Controls,
                        commandName);
                if (ret != null && ret.CommandName == commandName)
                    return ret;
            }

            return null;
        }

        private static LinkButton FindCommandButtonInRow(TableRow row, string commandName)
        {
            LinkButton ret;
            foreach (TableCell cell in row.Cells)
            {
                ret = FindCommandButtonInControlCollection(cell.Controls,
                    commandName);
                if (ret != null && ret.CommandName == commandName)
                    return ret;
            }

            return null;
        }

        #endregion

        #region Exposed Methods

        public void AttachHandlersToRow(GridViewRowEventArgs e)
        {
            if (UseClientSelect)
                AttachClientCommandHandler(e.Row, CommandNames.SELECT, OnClientSelect);

            if (UseClientDelete)
                AttachClientCommandHandler(e.Row, CommandNames.DELETE, OnClientDelete);

            if (UseClientUpdate)
                AttachClientCommandHandler(e.Row, CommandNames.UPDATE, OnClientUpdate);
        }

        #endregion
    }
}
