@using MMSINC.Results
@model Contractors.Models.ViewModels.SearchMeterChangeOut
@{
    ViewBag.Title = "Meter Change Outs";
    var userCanEdit = Html.CurrentUserCanEdit();

    var table = Html.TableFor(x => x, new { @class = "no-wrap-header"}) // Freddy/Ralph requested that headers do not wrap, like what we do in mvc.
        .WithCaption("Records found: " + Model.Count)
        .TemplateColumnFor("Id", x => Html.ActionLink(x.Id.ToString(), "Show", new {x.Id}));
    if (userCanEdit) // is there a better way to do this?
    {
        table = table.TemplateColumnFor("Edit", x => Html.ActionLink("Edit", "Edit", new {x.Id}));
    }
    table = table.ColumnFor(x => x.AccountNumber)
        .ColumnFor(x => x.CustomerName)
        .SortableColumnFor(x => x.ServiceStreetNumber)
        .SortableColumnFor(x => x.ServiceStreet)
        .SortableColumnFor(x => x.ServiceCity)
        .ColumnFor(x => x.DateScheduled)
        .ColumnFor(x => x.DateStatusChanged)
        .ColumnFor(x => x.MeterScheduleTime)
        .ColumnFor(x => x.AssignedContractorMeterCrew)
        .SortableColumnFor(x => x.CalledInByContractorMeterCrew)
        .ColumnFor(x => x.MeterChangeOutStatus)
        .SortableColumnFor(x => x.TypeOfPlumbing)
        .ColumnFor(x => x.Canvassed)
        .ColumnFor(x => x.ClickAdvantexUpdated)
        .ColumnFor(x => x.Contract.Description, "Contract Description")
        .ColumnFor(x => x.Contract.Contractor)
        .ColumnFor(x => x.Contract.OperatingCenter)
        .ColumnFor(x => x.ContractorDrilledLid)
        .ColumnFor(x => x.Email)
        .ColumnFor(x => x.EndStatus)
        .ColumnFor(x => x.EquipmentID)
        .ColumnFor(x => x.FieldNotes)
        .ColumnFor(x => x.InstalledJumperBar)
        .ColumnFor(x => x.IsHotRodRFOnly)
        .ColumnFor(x => x.IsMuellerMeter)
        .ColumnFor(x => x.IsNeptuneRFOnly)
        .ColumnFor(x => x.MeterCommentsPremise)
        .ColumnFor(x => x.MeterDirection)
        .ColumnFor(x => x.MeterLocation)
        .ColumnFor(x => x.MeterReadCode1)
        .ColumnFor(x => x.MeterReadComment1)
        .ColumnFor(x => x.MeterReadCode2)
        .ColumnFor(x => x.MeterReadComment2)
        .ColumnFor(x => x.MeterReadCode3)
        .ColumnFor(x => x.MeterReadComment3)
        .ColumnFor(x => x.MeterReadCode4)
        .ColumnFor(x => x.MeterReadComment4)
        .ColumnFor(x => x.MeterSize)
        .ColumnFor(x => x.MeterSupplementalLocation)
        .ColumnFor(x => x.MovedMeterToPit)
        .ColumnFor(x => x.NewRFNumber)
        .ColumnFor(x => x.NewSerialNumber)
        .ColumnFor(x => x.OperatedPointOfControlAtAnyValve)
        .ColumnFor(x => x.OutReadPadded)
        .ColumnFor(x => x.OwnerCustomerMeterLocation)
        .ColumnFor(x => x.OwnerLocationOther)
        .ColumnFor(x => x.PremiseNumber)
        .ColumnFor(x => x.RanNewWire)
        .ColumnFor(x => x.RemovedSerialNumber)
        .ColumnFor(x => x.RFDirection)
        .ColumnFor(x => x.RFLocation)
        .ColumnFor(x => x.RFSupplementalLocation)
        .ColumnFor(x => x.RouteNumber)
        .ColumnFor(x => x.ServiceZip)
        .ColumnFor(x => x.ServicePhone)
        .ColumnFor(x => x.ServicePhoneExtension)
        .ColumnFor(x => x.ServicePhone2)
        .ColumnFor(x => x.ServicePhone2Extension)
        .ColumnFor(x => x.StartRead)
        .ColumnFor(x => x.StartStatus)
        .ColumnFor(x => x.TurnedOffWater)
        .ColumnFor(x => x.MeterTurnedOnAfterHours)
        .ColumnFor(x => x.ProjectYear)
        .WithPaginatedFooter();

    var exportRouteDataExcel = Html.ViewData.ModelState.ToRouteValueDictionary();
    exportRouteDataExcel["ext"] = ResponseFormatter.KnownExtensions.EXCEL_2003;

    var exportRouteDataPdf = Html.ViewData.ModelState.ToRouteValueDictionary();
    exportRouteDataPdf["ext"] = ResponseFormatter.KnownExtensions.PDF;
}
@Html.LinkButton("Export to Excel", "Index", "MeterChangeOut", exportRouteDataExcel)
@Html.LinkButton("Export to PDF", "Index", "MeterChangeOut", exportRouteDataPdf)

@table