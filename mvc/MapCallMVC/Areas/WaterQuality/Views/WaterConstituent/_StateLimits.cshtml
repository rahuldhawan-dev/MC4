@using MapCallMVC.Areas.WaterQuality.Models.ViewModels
@model WaterConstituent

@{
    var userCanEdit = Html.CurrentUserCanEdit();
    var orderedList = Model.StateLimits.OrderBy(l => l.State.Name).ToList();

    var table = Html.TableFor(_ => orderedList, new {id = "stateLimits"})
        .ColumnFor(x => x.Description)
        .ColumnFor(x => x.State)
        .ColumnFor(x => x.Agency)
        .ColumnFor(x => x.Min)
        .ColumnFor(x => x.Max)
        .ColumnFor(x => x.Mcl)
        .ColumnFor(x => x.Mclg)
        .ColumnFor(x => x.Smcl)
        .ColumnFor(x => x.ActionLimit)
        .ColumnFor(x => x.UnitOfMeasure)
        .ColumnFor(x => x.Regulation)
        .ColumnFor(x => x.StateDEPAnalyteCode);
}

@if (userCanEdit)
{
    <div class="collapse-panel" data-title="Add New State Limit">
        @Html.Partial("_AddStateLimit", ViewModelFactory.BuildWithOverrides<AddWaterConstituentStateLimit>(new {
            WaterConstituent = Model.Id
        }))
    </div>
    using (var form = Form.BeginForm("Destroy", "WaterConstituentStateLimit", "WaterQuality"))
    {
        form.HtmlAttributes.Add("id", "childTableFooter");
        form.HtmlAttributes.Add("data-confirm", "Are you sure you want to remove this state limit?");
        @table.TemplateColumnFor(x => Control.SubmitButton("Remove State Limit").WithName("stateLimitId").WithValue(x.Id));
    }
}
else
{
    @table
}