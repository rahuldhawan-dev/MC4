@using OfficeOpenXml.FormulaParsing.Excel.Functions.Math
@model MapCallMVC.Areas.Production.Models.ViewModels.CreateProductionWorkOrder

@Html.ScriptFor("~/Scripts/Areas/Production/ProductionWorkOrder/Form.js", ScriptLoadType.LoadFromPartial)
@Html.ScriptFor("~/Scripts/Areas/Production/ProductionWorkOrder/New.js", ScriptLoadType.LoadFromPartial)

@section styles {
    <style>
        .top-fields {
            width: 50%;
            float: left;
        }

        .upper-right {
            width: 50%;
            float: right;
            padding: 8px;
            overflow: auto;
        }

        .bottom-fields {
            clear: both;
        }
    </style>
}

@using (Form.BeginForm("Create", "ProductionWorkOrder", "Production"))
{
    @Control.Hidden("FacilityShowUrl").WithValue(Url.Action("Show", "Facility", new { area = "" }))
    @Control.Hidden("EquipmentShowUrl").WithValue(Url.Action("Show", "Equipment", new { area = "" }))
    @Control.Hidden("ProductionWorkDescriptionShowUrl").WithValue(Url.Action("Show", "ProductionWorkDescription", new { area = "Production" }))
    @Control.Hidden("GetOperatingCenterIsSAPWorkOrdersEnabled").WithValue(Url.Action("IsSAPWorkOrdersEnabled", "OperatingCenter", new { area = string.Empty }))
    @Control.Hidden("EquipmentCriticalNotesUrl").WithValue(Url.Action("GetCriticalNotes", "Equipment", new { area = "" }))
    @Control.Hidden("GetEquipmentHistoryUrl").WithValue(Url.Action("History", "ProductionWorkOrder", new { area = "Production" }))
    @Control.HiddenFor(x => x.SendToSAP)

<div class="field-column fc150 top-fields">
    @Html.HiddenFor(x => x.CapitalizedFrom)
    @Html.EditorFor(x => x.OperatingCenter)
    @Html.EditorFor(x => x.PlanningPlant)
    @Html.EditorFor(x => x.Facility)
    @Html.EditorFor(x => x.FacilityFacilityArea)
    @Html.EditorFor(x => x.EquipmentType)
    @if (Model.Equipment.HasValue)
    {
        @Html.HiddenFor(x => x.Equipment)
    }
    else
    {
        @Html.EditorFor(x => x.Equipment)
    }
    @Html.EditorFor(x => x.Coordinate)
    @if (Model.Priority != (int)ProductionWorkOrderPriority.Indices.ROUTINE_OFF_SCHEDULED)
    {
        @Html.EditorFor(x => x.Priority)
    }
    @Html.EditorFor(x => x.ProductionWorkDescription)
    @Html.EditorFor(x => x.OrderNotes)
    @Html.EditorFor(x => x.CorrectiveOrderProblemCode)
    @Html.EditorFor(x => x.OtherProblemNotes)
    @Html.EditorFor(x => x.EstimatedCompletionHours)
    @Html.EditorFor(x => x.PlantMaintenanceActivityTypeOverride)
    @Html.RenderDisplayTemplate("WBS Charged", @<text>
        <div id="wbsElementLookupLink">
            @Ajax.ActionLink("Click here to Lookup and Verify the WBS Number", "Find", "WBSElement", new { area = "SAP" }, new AjaxOptions { HttpMethod = "GET" }, new { data_ajax_table = "#wbsElementTable" })
        </div>
        @Html.EditorWithoutWrapperFor(x => x.WBSElement)
    </text>)
    @Html.EditorFor(x => x.RequestedBy)
    @Html.EditorFor(x => x.DateReceived)
    @Html.EditorFor(x => x.Prerequisites)
    @Html.EditorFor(x => x.AssignToSelf)
</div>

    <div class="upper-right" id="History">
    </div>

    <div class="field-column fc150 bottom-fields">

        @Html.ButtonGroup(@<text>
            @Control.SubmitButton("Save")
            @Html.LinkButton("Cancel", "Search")
        </text>)
    </div>
}