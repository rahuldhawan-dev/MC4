@using MapCallMVC.Areas.Production.Models.ViewModels
@using MMSINC.ClassExtensions.IEnumerableExtensions
@model ProductionWorkOrder

<style>
    .div-container ul {
        list-style: none;
        display: inline-flex;
        justify-content: space-around;
        width: 460px;
    }

        .div-container ul li, .div-container select {
            width: 160px;
            margin-bottom: 10px;
            margin-right: 10px;
        }

            .div-container ul li:last-child {
                width: 50px;
            }

            .div-container ul li .field-pair {
                margin-right: 10px;
            }

    .div-container button {
        margin-top: 18px;
    }

    .div-container a.link-button {
        display: none !important;
    }

    .div-container .label {
        white-space: nowrap;
    }

    .field-validation-error span {
        line-height: 20px;
        display: block;
    }
</style>

@{
    var equipments = Model.Equipments.DistinctBy(x => new { x.Equipment, x.SAPEquipmentId }).ToList();
    var userCanAddWellTests = Html.CurrentUserCanDo("New", "WellTest", "Production");
    var table = Html.TableFor(x => equipments, new { id = "equipmentsTable" })
                    .TemplateColumnFor("SAP Equipment", x => @<text>
    @if (x.Equipment != null)
    {
        @x.Equipment.SAPEquipmentId
    }
    else
    {
        @x.SAPEquipmentId
    }
                    </text>)
.TemplateColumnFor("MapCall EquipmentId", x => @<text>
    @if (x.Equipment != null)
    {
        @Html.ActionLink(x.Equipment.Identifier, "Show", new { Controller = "Equipment", x.Equipment.Id, area = "" })
    }
</text>)
.TemplateColumnFor("Action", x => @<text>
    @if (x.Equipment != null)
    {
        if (x.Equipment.EquipmentType.Id == EquipmentType.Indices.WELL)
        {
            @Html.DefaultActionLink("New Well Test",
                "New",
                "WellTest",
                "Production",
                new { productionWorkOrder = Model.Id, equipment = x.Equipment.Id, operatingCenter = x.Equipment.OperatingCenter.Id },
                new { Class = "link-button" })
        }
    }

</text>)
.IsVisible(userCanAddWellTests)
.ColumnFor(x => x.Equipment.Description)
.ColumnFor(x => x.SAPNotificationNumber)
.ColumnFor(x => x.CompletedOn)
.ColumnFor(x => x.Equipment.EquipmentType)
.TemplateColumnFor("As Found / As Left", y => @<div>
                                                  @if (Model.OrderType.Id == OrderType.Indices.ROUTINE_13 && Model.Equipments.Any(x => x.Equipment != null))
                                                  {
                                                      @Html.Partial("_EditEquipmentAsLeftAndAsFoundCondition", ViewModelFactory.BuildWithOverrides<ProductionWorkOrderEquipmentViewModel, ProductionWorkOrderEquipment>(y, new { ProductionWorkOrderId = y.ProductionWorkOrder.Id }))
                                                  }
                                              </div>);}
@table
