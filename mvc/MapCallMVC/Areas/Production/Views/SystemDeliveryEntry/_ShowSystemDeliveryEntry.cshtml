@using MMSINC.ClassExtensions.IEnumerableExtensions
@using MMSINC.Utilities
@model SystemDeliveryEntry

@*because of the way the search has to be setup, it dupes the operating centers list. Need to distinct that list*@
<div class="field-column fc200">
    @Html.DisplayFor(x => x.WeekOf)
    @Html.RenderDisplayTemplate("Operating Centers", @<text>@string.Join(", ", Model.OperatingCenters.DistinctBy(x => x.Id).Select(x => x.Description))</text>)
    @Html.DisplayFor(x => x.SystemDeliveryType)
    @if (Model.SystemDeliveryType.Id == SystemDeliveryType.Indices.WATER)
    {
        @Html.RenderDisplayTemplate("PWSIDs", @<text>@string.Join(", ", Model.PublicWaterSupplies.Select(x => x.Description))</text>)
    }
    else
    {
        @Html.RenderDisplayTemplate("WWSIDs", @<text>@string.Join(", ", Model.WasteWaterSystems.Select(x => x.Description))</text>)
    }
    @Html.RenderDisplayTemplate("Facilities", @<text>@string.Join(", ", Model.Facilities.Select(x => x.FacilityIdWithFacilityName))</text>)
    @Html.DisplayFor(x => x.IsValidated)

    @{
        decimal? total = 0.000m;
        var ocCatTotals = Model.OperatingCenterCategoryTotals;
        decimal? pwsOcTotal = 0.000m;
        int entryCount = 1;
        var entries = Model.FacilityEntries
            .GroupBy(x => new { OperatingCenter = x.Facility.OperatingCenter.Description })
            .OrderBy(g => g.Key.OperatingCenter)
            .Select(g => new {
                g.Key.OperatingCenter,
                Facilities = g.GroupBy(f => new { f.Facility.FacilityName, f.IsInjectionSite, f.Facility.FacilityId, f.Facility.FacilityIdWithFacilityName })
                    .OrderBy(gr => gr.Key.FacilityName)
                    .Select(gg => new {
                        Facility = gg.Key.FacilityName, gg.Key.IsInjectionSite, gg.Key.FacilityId, gg.Key.FacilityName,
                        EntryTypes = gg.GroupBy(x => x.SystemDeliveryEntryType.Description)
                            .Select(sdet => new {
                                SystemDeliveryEntryType = sdet.Key,
                                FacilityEntries = sdet.OrderBy(h => h.EntryDate)
                            }).ToList()
                    }).ToList(),
            }).ToList();

        const string adjustedStyle = "background-color: #FF6347";
        var entryCanBeValidated = (Model.IsValidated != true) && (RoleService.CurrentUserRoles.Any(x => 
            x.Module.Value == RoleModules.ProductionSystemDeliveryApprover && 
            x.Action.Id == (int)RoleActions.Add || 
            x.Action.Id == (int)RoleActions.UserAdministrator) || Authentication.CurrentUserIsAdmin);
    }
    <div class="reversal-note" id="reversalNote">
        <h3>
            Adjustments are in <mark class="note-color">red;</mark> For adjustment values see the adjustments tab.
        </h3>
    </div>
    <table class="systemdelivery" id="entryTable">
        @foreach (var oc in entries)
        {
            pwsOcTotal = 0.000m;
            var daysOfTheWeekTotals = new decimal[] { 0, 0, 0, 0, 0, 0, 0 };
            var firstDay = -1;
            var lastDay = 0;
            <thead>
            <tr>
                <th colspan="19">@oc.OperatingCenter</th>
            </tr>
            </thead>

            foreach (var facility in oc.Facilities)
            {
                total = 0.000m;
                <thead>
                <tr>
                    <th>Facility</th>
                    <th>Category</th>
                    @if (Model.SystemDeliveryType.Id != SystemDeliveryType.Indices.WASTE_WATER)
                    {
                        <th>
                            Supplier
                            <br/>
                            Facility
                        </th>
                        <th>
                            Purchase
                            <br/>
                            Supplier
                        </th>
                    }

                    @for (var i = 0; i <= 6; i++)
                    {
                        <th>
                            @Html.DisplayValueFor(x => x.WeekOf.AddDays(i).Date, CommonStringFormats.DATE)
                            <br/>
                            @Html.DisplayValueFor(x => x.WeekOf.AddDays(i).DayOfWeek)
                        </th>
                        if (facility.IsInjectionSite)
                        {
                            <th>
                                Injection?
                            </th>
                        }
                    }

                    <th>Total</th>
                </tr>
                </thead>

                foreach (var entryType in facility.EntryTypes)
                {
                    var style = facility.EntryTypes.IndexOf(entryType) % 2 == 0 ? "" : "background-color: #e1eef7";
                    var systemDeliveryEntryType = entryType.SystemDeliveryEntryType;
                    var supplierFacility = entryType.FacilityEntries.First().SupplierFacilityName;
                    var purchaseSupplier = entryType.FacilityEntries.First().PurchaseSupplierName;
                    var weeklyTotal = entryType.FacilityEntries.Sum(x => x.EntryValue);
                    total = total += weeklyTotal;
                    pwsOcTotal = pwsOcTotal += weeklyTotal;

                    <tbody>
                    <tr style="@style">
                        <td>@facility.FacilityName</td>
                        <td>@Html.DisplayValueFor(_ => systemDeliveryEntryType)</td>

                        @if (Model.SystemDeliveryType.Id != SystemDeliveryType.Indices.WASTE_WATER)
                        {
                            <td>@Html.DisplayValueFor(_ => supplierFacility)</td>
                            <td>@Html.DisplayValueFor(_ => purchaseSupplier)</td>
                        }

                        @for (var i = 0; i <= 6; i++)
                        {
                            var entry = entryType.FacilityEntries.Any(x =>
                                ((int)x.EntryDate.DayOfWeek + 6) % 7 == i)
                                ? entryType.FacilityEntries.FirstOrDefault(x =>
                                    ((int)x.EntryDate.DayOfWeek + 6) % 7 == i)
                                : null;
                            var entryValue = entry != null ? entry.EntryValue : (decimal?)null;
                            var isInjectionSite = entry != null && entry.IsInjectionSite;
                            var entryInjection = entry != null && entry.IsInjection;
                            var entryStyle = entry != null && entry.HasBeenAdjusted ? adjustedStyle : "";

                            if (entryValue != null)
                            {
                                daysOfTheWeekTotals[i] += entry.EntryValue;
                                if(firstDay == -1)
                                {
                                    firstDay = i;
                                }
                                lastDay = i;
                            }
                            
                            <td style="@entryStyle">@Html.DisplayValueFor(_ => entryValue, CommonStringFormats.DECIMAL_MAX_THREE_DECIMAL_PLACES)</td>
                            if (facility.IsInjectionSite)
                            {
                                if (isInjectionSite)
                                {
                                    <td style="@entryStyle">@Html.DisplayValueFor(_ => entryInjection)</td>
                                }
                                else
                                {
                                    <td style="@entryStyle"></td>
                                }
                            }
                        }
                        <td>@Html.DisplayValueFor(_ => weeklyTotal, CommonStringFormats.DECIMAL_MAX_THREE_DECIMAL_PLACES)</td>
                    </tr>
                    </tbody>
                }
                <tr>
                    <td></td>
                </tr>
                if (Model.SystemDeliveryType.Id == SystemDeliveryType.Indices.WATER)
                {
                    <tr>
                        <td id="total" colspan="11">@facility.FacilityName Total</td>
                        <td>@string.Format(CommonStringFormats.DECIMAL_MAX_THREE_DECIMAL_PLACES, total)</td>
                    </tr>
                }
            }
            <tr>
                <td></td>
            </tr>
            if (Model.SystemDeliveryType.Id == SystemDeliveryType.Indices.WASTE_WATER)
            {
                <tr>
                    <td class="operating-center-total" id="octotals" colspan="11">@oc.OperatingCenter Totals</td>
                </tr>
                foreach (var oct in ocCatTotals[oc.OperatingCenter])
                {
                    <tr>
                        <td colspan="11">@oct.Key Total:</td>
                        <td>@string.Format(CommonStringFormats.DECIMAL_MAX_THREE_DECIMAL_PLACES, oct.Value)</td>
                    </tr>
                }

                if (entryCount < entries.Count)
                {
                    <tr>
                    </tr>
                    <tr class="seperaterLine">
                        <td ></td>
                    </tr>
                    entryCount++;
                }
                <tr>
                    <td></td>
                </tr>
            }
            else
            {
                <tr>
                    <td id="octotal" class="operating-center-total" colspan="4">@oc.OperatingCenter Total</td>
                    @for(int i = 0; i < 7; i++){
                        if (i >= firstDay && i <= lastDay)
                        {
                            <td class="operating-center-day-total">@string.Format(CommonStringFormats.DECIMAL_MAX_THREE_DECIMAL_PLACES, daysOfTheWeekTotals[i])</td>
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                    <td class="operating-center-total">@string.Format(CommonStringFormats.DECIMAL_MAX_THREE_DECIMAL_PLACES, pwsOcTotal)</td>
                </tr>
            }
        }
        @if (entryCanBeValidated)
        {
            using (Form.BeginForm("ValidateAndSubmit", "SystemDeliveryEntry", "Production", new { Model.Id }))
            {
                <tr>
                    <td colspan="12">
                        @Html.ButtonGroup(
                            @<text>
                                @Control.SubmitButton("Validate and submit").With("onclick", "return confirm('Are you sure you would like to validate this entry');").WithCssClass("no-double-submit validate-btn")
                             </text>)
                    </td>
                </tr>
            }
        }
    </table>
</div>