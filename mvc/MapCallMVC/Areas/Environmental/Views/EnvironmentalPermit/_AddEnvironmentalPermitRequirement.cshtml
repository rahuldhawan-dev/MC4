@model MapCallMVC.Areas.Environmental.Models.ViewModels.EnvironmentalPermits.CreateEnvironmentalPermitRequirement

@using (var form = Form.BeginRouteForm("EnvironmentalPermit", "EnvironmentalPermitRequirement", null, ManyToManyRouteAction.Add))
{
    form.HtmlAttributes.Add("id", "environmentalPermitRequirementForm");
<div class="field-column fc200">
    @Control.HiddenFor(x => x.Id)
    @Control.HiddenFor(x => x.RequiresRequirements)

    <input type="hidden" name="CreateEnvironmentalPermitRequirement_OperatingCenters" id="CreateEnvironmentalPermitRequirement_OperatingCenters" value="@(string.Join(",", Model.OperatingCenters))"/>

    @Control.HiddenFor(x => x.State)
    @Html.EditorFor(x => x.RequirementType)
    @Html.EditorFor(x => x.Requirement)
    @Html.EditorFor(x => x.ValueUnit)
    @Html.EditorFor(x => x.ValueDefinition)
    @Html.EditorFor(x => x.TrackingFrequency)
    @Html.EditorFor(x => x.ReportingFrequency)
    @Html.EditorFor(x => x.ReportingFrequencyDetails)
    @Html.EditorFor(x => x.ProcessOwner)
    @Html.EditorFor(x => x.ReportingOwner)
    @Html.EditorFor(x => x.ReportDataStorageLocation)
    @Html.EditorFor(x => x.ReportCreationInstructions)
    @Html.EditorFor(x => x.ReportSendTo)
    @Html.EditorFor(x => x.CommunicationType)
    @Html.EditorFor(x => x.CommunicationEmail)
    @Html.EditorFor(x => x.CommunicationLink)
    @Html.EditorFor(x => x.RequirementNotes)

    @Html.ButtonGroup(@<text>
        @Control.SubmitButton("Save Requirement")
        @Control.Button("Cancel").WithId("cancelAddEnvironmentalPermitRequirementButton").WithCssClass("cancel")
    </text>)
</div>
}
