@using MapCallMVC.Areas.FieldOperations.Models.ViewModels
@model MapCallMVC.Areas.FieldOperations.Models.ViewModels.BlowOffInspectionViewModel

@* all the field names are the same so we can just reuse the HydrantInspection form script *@
@Html.ScriptFor("~/Scripts/Areas/FieldOperations/HydrantInspection/Form.js", ScriptLoadType.LoadFromPartial)

@Html.RenderDisplayTemplate("Valve", Html.ActionLink(Model.ValveDisplay.ToString(), "Show", "Valve", new {id = Model.Valve}, null))
@if (Model.ValveDisplay.Critical)
{
  @Html.DisplayFor(x => x.ValveDisplay.CriticalNotes, new {@class = "critical-notes-display"})
}
@Html.DisplayFor(x => x.ValveDisplay.ValveLocation)
@if (Authentication.CurrentUserIsAdmin)
{
  @Html.EditorFor(x => x.DateInspected)
}
else
{
  // This only needs to be secured for non-admins since they can't edit it.
  // Secured from the view that renders this partial
  @Html.DisplayFor(x => x.DateInspected)
}
@Html.Display("InspectedBy")
@Html.EditorFor(x => x.HydrantInspectionType)
@Html.EditorFor(x => x.FullFlow)
@Html.EditorFor(x => x.GPM)
@Html.EditorFor(x => x.MinutesFlowed)
@Html.EditorFor(x => x.StaticPressure)
@Html.EditorFor(x => x.PreResidualChlorine)
@Html.EditorFor(x => x.ResidualChlorine)
@Html.EditorFor(x => x.FreeNoReadReason)
@Html.EditorFor(x => x.PreTotalChlorine)
@Html.EditorFor(x => x.TotalChlorine)
@Html.EditorFor(x => x.TotalNoReadReason)
@Html.EditorFor(x => x.Remarks)
@Html.HiddenFor(x => x.IsMapPopup) @* script call for this is in New and Edit.cshtml *@
@Html.DisplayFor(x => x.Display.SAPErrorCode)
@Html.DisplayFor(x => x.Display.SAPNotificationNumber)
@Html.Hidden("MaxChlorineLevel", BlowOffInspectionViewModel.MAX_CHLORINE_LEVEL)
@Html.Hidden("MinChlorineLevel", BlowOffInspectionViewModel.MIN_CHLORINE_LEVEL)