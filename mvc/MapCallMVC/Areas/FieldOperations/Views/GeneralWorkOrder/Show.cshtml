@using MapCallMVC.Areas.FieldOperations.Controllers
@using MapCallMVC.Areas.FieldOperations.Models.ViewModels
@model WorkOrder

@{
    ActionBarHelper.AddPdfLink();
    ActionBarHelper.AddMapLink();
}

@Html.ScriptFor("~/Scripts/Areas/FieldOperations/SAPNotification/SAPNotificationSearchStorage.js", ScriptLoadType.LoadFromPartial)
@Html.ScriptFor("~/Scripts/Areas/FieldOperations/WorkOrder/Show.js", ScriptLoadType.LoadFromPartial)
@Html.ScriptFor("~/Scripts/Areas/FieldOperations/WorkOrder/AssetTabs.js", ScriptLoadType.LoadFromPartial)

@* NOTE: This needs to exist *outside of the tabs* otherwise this error will get missed
    due to the tab-remembering feature. *@
@if (Model.HasRealSAPError)
{
    @Html.DisplayInlineNotification(new MMSINC.Models.ViewModels.NotificationItem
    {
        Message = Model.SAPErrorCode,
        NotificationType = MMSINC.Models.ViewModels.NotificationItemType.Error
    })
}

@if (Model.CancelledAt != null)
{
    <div id="cancellationInfo" style="background-color: orange">
        Cancelled On: @Model.CancelledAt.Value.ToString("M/d/yyyy")
        By: @Model.CancelledBy <br />
        Reason: @Model.WorkOrderCancellationReason
    </div>
}

@if (Model.SpecialInstructions != null)
{
    <h5>
        @Html.DisplayLabelFor(x => x.SpecialInstructions):
        <span style="color: red" id="WorkOrderSpecialInstructions">@Html.DisplayTextFor(m => m.SpecialInstructions)</span>
    </h5>
}
@(Html.Tabs()
      .WithTab("Initial Information", "~/Areas/FieldOperations/Views/WorkOrder/_InitialDetails.cshtml", Model)
      .WithTab("Valve", "~/Areas/FieldOperations/Views/WorkOrder/_Valve.cshtml", Model.Valve, isVisible: Model.AssetType.Id == AssetType.Indices.VALVE)
      .WithTab("Hydrant", "~/Areas/FieldOperations/Views/WorkOrder/_Hydrant.cshtml", Model.Hydrant, isVisible: Model.AssetType.Id == AssetType.Indices.HYDRANT)
      .WithTab("Sewer Opening", "~/Areas/FieldOperations/Views/WorkOrder/_SewerOpening.cshtml", Model.SewerOpening, isVisible: Model.AssetType.Id == AssetType.Indices.SEWER_OPENING)
      .WithTab("Service", "~/Areas/FieldOperations/Views/WorkOrder/_Service.cshtml", Model.Service, isVisible: Model.Service != null)
      .WithTab("Materials", "~/Areas/FieldOperations/Views/WorkOrder/_Materials.cshtml", Model, itemCount: Model.MaterialsUsed.Count)
      .WithTab("Spoils", "~/Areas/FieldOperations/Views/WorkOrder/_Spoils.cshtml", Model, itemCount: Model.Spoils.Count)
      .WithTab("Markouts", "~/Areas/FieldOperations/Views/Markout/_Index.cshtml", Model, itemCount: Model.Markouts.Count)
      .WithTab("Markout Violations", "~/Areas/FieldOperations/Views/WorkOrder/_MarkoutViolations.cshtml", Model, itemCount: Model.MarkoutViolations.Count)
      .WithTab("Markout Damages", "~/Areas/FieldOperations/Views/WorkOrder/_MarkoutDamages.cshtml", Model, itemCount: Model.MarkoutDamages.Count)
      .WithTab("Sewer Overflows", "~/Areas/FieldOperations/Views/WorkOrder/_SewerOverflows.cshtml", Model, isVisible: Model.IsSewerOverflow(), itemCount: Model.SewerOverflows.Count)
      .WithTab("Traffic Control", "~/Areas/FieldOperations/Views/WorkOrder/_TrafficControl.cshtml", Model, itemCount: Model.TrafficControlTickets.Count)
      .WithTab("Restoration", "~/Areas/FieldOperations/Views/WorkOrder/_Restorations.cshtml", Model, itemCount: Model.Restorations.Count)
      .WithTab("Crew Assignments", "~/Areas/FieldOperations/Views/WorkOrder/_CrewAssignments.cshtml", Model, itemCount: Model.CrewAssignments.Count)
      .WithTab("Additional", "~/Areas/FieldOperations/Views/WorkOrder/_Additional.cshtml", Model)
      .WithTab("Account", "~/Areas/FieldOperations/Views/WorkOrder/_Account.cshtml", Model, isVisible: Model.DateCompleted.HasValue)
      .WithTab("Street Opening Permit", "~/Areas/FieldOperations/Views/StreetOpeningPermit/_Index.cshtml", Model, isVisible: Model.StreetOpeningPermitRequired, itemCount: Model.StreetOpeningPermits.Count)
      .WithTab("Main Break", "~/Areas/FieldOperations/Views/WorkOrder/_MainBreaks.cshtml", Model, isVisible: Model.IsMainBreak(), itemCount: Model.MainBreaks.Count)
      .WithTab("Schedule Of Values", "~/Areas/FieldOperations/Views/WorkOrder/_ScheduleOfValues.cshtml", Model, isVisible: Model.OperatingCenter.HasWorkOrderInvoicing, itemCount: Model.WorkOrdersScheduleOfValues.Count)
      .WithTab("Purchase Orders(PO)", "~/Areas/FieldOperations/Views/WorkOrder/_Requisitions.cshtml", Model, itemCount: Model.Requisitions.Count)
      .WithTab("Job Site Check Lists", "~/Areas/FieldOperations/Views/WorkOrder/_JobSiteCheckLists.cshtml", Model, itemCount: Model.JobSiteCheckLists.Count)
      .WithTab("Job Observations", "~/Areas/FieldOperations/Views/WorkOrder/_JobObservations.cshtml", Model)
      .WithTab("Invoices", "~/Areas/FieldOperations/Views/WorkOrder/_Invoices.cshtml", Model, itemCount: Model.Invoices.Count, isVisible: Model.OperatingCenter.HasWorkOrderInvoicing)
      .WithTab("Set Meter", "~/Areas/FieldOperations/Views/WorkOrder/_Meters.cshtml", Model, itemCount: Model.ServiceInstallations.Count, isVisible: Model.IsNewServiceInstallation)
      .WithDocuments()
      .WithLog()
	)

<br />
<div class="container">
    @if (Model.CancelledAt == null &&
         !Model.DateCompleted.HasValue &&
         !Model.MaterialsUsed.Any() &&
         (Model.CrewAssignments == null || Model.CrewAssignments.All(x => x.DateStarted == null)) &&
         !Model.CrewAssignments.Any(x => x.AssignedFor.Date == DateTime.Today))
    {
        @Control.Button("Cancel Order").WithId("btnCancelOrder")
    }

    @if (!Model.DateCompleted.HasValue && !Model.MaterialPlanningCompletedOn.HasValue)
    {
        using (Form.BeginForm("CompleteMaterialPlanning", "WorkOrder", "FieldOperations", new { Model.Id }))
        {
            @Control.SubmitButton("Complete Material Planning").With("onclick", "return confirm('Are you sure you want to complete Material Planning?');").WithCssClass("no-double-submit")
            ;
        }
    }

    @Html.ActionLink("SAP Notifications", "Index", "SAPNotification", new { area = "FieldOperations" }, new { id = "sap-notification-search-link", Class = "link-button" })

    @if (Model.AssetType != null && (Model.AssetType.Id == AssetType.Indices.SERVICE || Model.AssetType.Id == AssetType.Indices.SEWER_LATERAL) && Model.Service == null)
    {
        @Html.ActionLink("Create Service", "LinkOrNew", "Service", new { area = "FieldOperations", workOrderId = Model.Id }, new { Class = "link-button" })
    }

    <div id="cancelOrderPanel" style="display: none; padding: 6px;" class="field-column fc200">
        <fieldset>
            <legend>Cancel</legend>
            @Html.Partial("~/Areas/FieldOperations/Views/WorkOrder/_Cancel.cshtml", ViewModelFactory.Build<CancelWorkOrder, WorkOrder>(Model))
        </fieldset>
    </div>
</div>