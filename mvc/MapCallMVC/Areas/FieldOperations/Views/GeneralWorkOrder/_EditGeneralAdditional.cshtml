@model MapCallMVC.Areas.FieldOperations.Models.ViewModels.GeneralWorkOrder.EditGeneralAdditional

@{
    var isServiceLineRenewal = Model.WorkOrder != null && Model.WorkOrder.WorkDescription != null &&
                               WorkDescription.SERVICE_LINE_RENEWALS.Contains(Model.WorkOrder.WorkDescription.Id);
    var isServiceLineRetire = Model.WorkOrder != null && Model.WorkOrder.WorkDescription != null &&
                              WorkDescription.SERVICE_LINE_RETIRE.Contains(Model.WorkOrder.WorkDescription.Id);
    var displayServiceLineRenewal = isServiceLineRenewal ? "" : "none";
    var displayServiceLineRetire = isServiceLineRetire ? "" : "none";
    var displayServiceLineInfo = isServiceLineRetire || isServiceLineRenewal ? "" : "none";
    var displayComplianceData = Model.WorkOrder != null && Model.WorkOrder.WorkDescription != null &&
                                WorkDescription.PITCHER_FILTER_REQUIREMENT.Contains(Model.WorkOrder.WorkDescription.Id) ? "" : "none";
    var displayMainBreakInfo = (Model.WorkOrder != null && Model.WorkOrder.IsMainBreak()) ? "" : "none";
}

@Html.ScriptFor("~/Scripts/Areas/FieldOperations/WorkOrder/General/Additional.js", ScriptLoadType.LoadFromPartial)

@using (var form = Form.BeginForm("UpdateAdditional", "GeneralWorkOrder", "FieldOperations", new { Model.Id }))
{
    form.HtmlAttributes["id"] = "AdditionalForm";
    @Control.HiddenFor(m => m.WorkOrderPriority)
    @Control.HiddenFor(m => m.StreetOpeningPermitRequired)
    <fieldset>
        <div class="field-column fc200">
            @Html.DisplayFor(x => x.WorkOrder.TotalManHours)
            @if ((Model.WorkOrder.WorkDescription != null &&
                 WorkDescription.SERVICE_LINE_INSTALLATIONS.Contains(Model.WorkOrder.WorkDescription.Id)) ||
                 Model.WorkOrder.ApprovedOn.HasValue)
            {
	            @Html.DisplayFor(x => x.WorkOrder.WorkDescription)
                @Control.HiddenFor(x => x.FinalWorkDescription).WithValue(Model.WorkOrder.WorkDescription.Id)
            }
            else
            {
	            @Html.EditorFor(x => x.FinalWorkDescription)
            }
            <div id="mainBreakInfo" style="display: @displayMainBreakInfo">
                @Html.EditorFor(x => x.CustomerImpact)
                @Html.EditorFor(x => x.RepairTime)
                @Html.EditorFor(x => x.AlertIssued)
                @Html.EditorFor(x => x.TrafficImpact)
            </div>
            @Html.EditorFor(x => x.LostWater)
            @Html.RenderDisplayTemplate("", @<text>@Html.Link("~/Content/LeakageChart.pdf", "Leakage Chart", new { target = "_blank" })</text>)
            @Html.EditorFor(x => x.DistanceFromCrossStreet)
            @Html.DisplayFor(x => x.WorkOrder.Notes, new { DisplayName = "Current Notes" })
            @Html.EditorFor(x => x.AppendNotes)

            @Html.ButtonGroup(@<text>@Control.SubmitButton("Update").WithId("btnUpdate")</text>)

            <fieldset id="serviceLineInfo" style="display: @displayServiceLineInfo">
                <legend>Service Line Info</legend>
                @Html.EditorFor(x => x.PreviousServiceLineMaterial, new { Class = "serviceLineRenewalInfo" })
                @Html.EditorFor(x => x.PreviousServiceLineSize, new { Class = "serviceLineRenewalInfo" })
                @Html.EditorFor(x => x.CompanyServiceLineMaterial)
                @Html.EditorFor(x => x.CompanyServiceLineSize)
                @Html.EditorFor(x => x.CustomerServiceLineMaterial, new { Class = "serviceLineRenewalInfo" })
                @Html.EditorFor(x => x.CustomerServiceLineSize, new { Class = "serviceLineRenewalInfo" })
                @Html.EditorFor(x => x.DoorNoticeLeftDate, new { Class = "serviceLineRenewalInfo" })
            </fieldset>
            <fieldset id="complianceInfo" style="display: @displayComplianceData">
	            <legend>Compliance Data</legend>
	            <div>
		            @Html.RenderEditorTemplate(Html.DisplayLabelFor(x => x.InitialServiceLineFlushTime),
			            @<text>
				            @Html.EditorWithoutWrapperFor(x => x.InitialServiceLineFlushTime)
				            <div id="flush-time-below-minimum-message" style="color:#FF0000"> Below minimum </div>
			             </text>)
		            @Html.EditorFor(x => x.HasPitcherFilterBeenProvidedToCustomer)
		            <div id="deliveryDetails">
			            @Html.EditorFor(x => x.DatePitcherFilterDeliveredToCustomer)
			            @Html.EditorFor(x => x.PitcherFilterCustomerDeliveryMethod)
		            </div>
		            <div id="otherDeliveryDescription">
			            @Html.EditorFor(x => x.PitcherFilterCustomerDeliveryOtherMethod)
		            </div>
		            @Html.EditorFor(x => x.DateCustomerProvidedAWStateLeadInformation)
	            </div>
            </fieldset>
            
            @Html.RenderDisplayTemplate("Other Links",
	            @<text>
		            @Html.ActionLink("General", "Show", "GeneralWorkOrder", new { id = Model.Id, area = "FieldOperations" }, new { Class = "link-button"})
		            @if (Model.WorkOrder.CanBeFinalized)
		            {
			            @Html.ActionLink("Finalization", "Edit", "WorkOrderFinalization", new { id = Model.Id, area = "FieldOperations" }, new { Class = "link-button"})
		            }
		            @if (Model.WorkOrder.CurrentCrew != null)
		            {
			            @Html.ActionLink("Crew Assignments", "ShowCalendar", "CrewAssignment", new { area = "FieldOperations", Crew = Model.WorkOrder.CurrentCrew.Id, Date = DateTime.Now }, new { Class = "link-button" })
		            }
	             </text>)
        </div>
    </fieldset>
}