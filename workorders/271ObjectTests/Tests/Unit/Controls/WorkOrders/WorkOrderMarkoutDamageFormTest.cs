using System;
using System.Web.UI.WebControls;
using LINQTo271.Controls.WorkOrders;
using MMSINC.Common;
using MMSINC.Controls;
using MMSINC.Interface;
using MMSINC.Testing.DesignPatterns;
using MMSINC.Testing.MSTest;
using MMSINC.Testing.MSTest.TestExtensions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Rhino.Mocks;

[TestClass]
public class WorkOrderMarkoutDamageFormTest : EventFiringTestClass
{
    #region Private Members

    private IViewState _viewState;
    private IGridView _gvMarkoutDamages;
    private IGridViewRow _iFooterRow;
    private IObjectDataSource _odsMarkoutDamages;
    private ParameterCollection _odsMarkoutDamagesParameters;
    private TestWorkOrderMarkoutDamageForm _target;

    #endregion

    #region Additional Test Attributes

    [TestInitialize]
    public override void EventFiringTestClassInitialize()
    {
        base.EventFiringTestClassInitialize();

        _mocks
            .DynamicMock(out _odsMarkoutDamages)
            .DynamicMock(out _viewState)
            .DynamicMock(out _gvMarkoutDamages)
            .DynamicMock(out _iFooterRow);

        _odsMarkoutDamagesParameters = new ParameterCollection();
        SetupResult.For(_odsMarkoutDamages.SelectParameters).Return(
            _odsMarkoutDamagesParameters);

        _target = new TestWorkOrderMarkoutDamageFormBuilder()
            .WithODSMarkoutDamages(_odsMarkoutDamages)
            .WithGVMarkoutDamages(_gvMarkoutDamages)
            .WithViewState(_viewState);

        SetupGridView();
    }

    [TestCleanup]
    public override void EventFiringTestClassCleanup()
    {
        base.EventFiringTestClassCleanup();
    }

    private void SetupGridView()
    {
        SetupResult.For(_gvMarkoutDamages.IFooterRow).Return(_iFooterRow);
    }

    #endregion

    #region Property Tests

    [TestMethod]
    public void TestSettingWorkOrderIDSetsSelectParameterForDataSource()
    {
        var expectedID = 1;
        var param = new Parameter("WorkOrderID");
        _odsMarkoutDamagesParameters.Add(param);

        _mocks.ReplayAll();

        _target.WorkOrderID = expectedID;

        Assert.AreEqual(expectedID.ToString(), param.DefaultValue);
    }

    #endregion

    #region Event Handler Tests

    [TestMethod]
    public void TestPageLoadHidesSelectAndDeleteControlsWhenCurrentMvpModeIsReadOnly()
    {
        using (_mocks.Record())
        {
            SetupResult.For(_viewState.GetValue(
                WorkOrderDetailControlBase.ViewStateKeys.CURRENT_MVP_MODE)).
                Return(DetailViewMode.ReadOnly);

            _gvMarkoutDamages.AutoGenerateSelectButton = false;
            _gvMarkoutDamages.AutoGenerateDeleteButton = false;
        }

        using (_mocks.Playback())
        {
            InvokeEventByName(_target, "Page_Load");
        }
    }

    [TestMethod]
    public void TestPageLoadDoesNotHideSelectOrDeleteControlsWhenCurrentMvpModeIsNotReadOnly()
    {
        foreach (DetailViewMode mode in Enum.GetValues(typeof(DetailViewMode)))
        {
            if (mode == DetailViewMode.ReadOnly) continue;

            using (_mocks.Record())
            {
                SetupResult.For(
                    _viewState.GetValue(
                        WorkOrderDetailControlBase.ViewStateKeys.
                            CURRENT_MVP_MODE)).Return(mode);

                //     _gvMarkoutDamages.AutoGenerateSelectButton = true;
                _gvMarkoutDamages.AutoGenerateDeleteButton = true;
            }

            using (_mocks.Playback())
            {
                InvokeEventByName(_target, "Page_Load");
            }

            _mocks.VerifyAll();
            _mocks.BackToRecordAll();
        }

        _mocks.ReplayAll();
    }

    [TestMethod]
    public void TestPagePrerenderHidesInsertRowWhenCurrentMvpModeIsReadOnly()
    {
        using (_mocks.Record())
        {
            SetupResult.For(
                _viewState.GetValue(
                    WorkOrderDetailControlBase.ViewStateKeys.CURRENT_MVP_MODE))
                .Return(DetailViewMode.ReadOnly);

            _iFooterRow.Visible = false;
        }

        using (_mocks.Playback())
        {
            InvokeEventByName(_target, "Page_Prerender");
        }
    }

    [TestMethod]
    public void TestPagePrerenderDoesNotHideInsertRowWhenCurrentMvpModeIsNotReadOnly()
    {
        foreach (DetailViewMode mode in Enum.GetValues(typeof(DetailViewMode)))
        {
            if (mode == DetailViewMode.ReadOnly) continue;

            using (_mocks.Record())
            {
                SetupResult.For(
                    _viewState.GetValue(
                        WorkOrderDetailControlBase.ViewStateKeys.
                            CURRENT_MVP_MODE)).Return(mode);

                _iFooterRow.Visible = true;
            }

            using (_mocks.Playback())
            {
                InvokeEventByName(_target, "Page_Prerender");
            }

            _mocks.VerifyAll();
            _mocks.BackToRecordAll();
            SetupGridView();
        }

        _mocks.ReplayAll();
    }

    #endregion
}

internal class TestWorkOrderMarkoutDamageFormBuilder : TestDataBuilder<TestWorkOrderMarkoutDamageForm>
{
    #region Private Members

    private IGridView _gvMarkoutDamages;
    private IViewState _viewState;
    private IObjectDataSource _odsMarkoutDamages;

    #endregion

    #region Exposed Methods

    public override TestWorkOrderMarkoutDamageForm Build()
    {
        var obj = new TestWorkOrderMarkoutDamageForm();
        if (_odsMarkoutDamages != null)
            obj.SetODSMarkoutDamages(_odsMarkoutDamages);
        if (_gvMarkoutDamages != null)
            obj.SetGVMarkoutDamages(_gvMarkoutDamages);
        if (_viewState != null)
            obj.SetViewState(_viewState);
        return obj;
    }

    public TestWorkOrderMarkoutDamageFormBuilder WithODSMarkoutDamages(IObjectDataSource ods)
    {
        _odsMarkoutDamages = ods;
        return this;
    }

    public TestWorkOrderMarkoutDamageFormBuilder WithGVMarkoutDamages(IGridView gridView)
    {
        _gvMarkoutDamages = gridView;
        return this;
    }

    public TestWorkOrderMarkoutDamageFormBuilder WithViewState(IViewState viewState)
    {
        _viewState = viewState;
        return this;
    }

    #endregion
}

internal class TestWorkOrderMarkoutDamageForm : WorkOrderMarkoutDamageForm
{
    #region Exposed Methods

    public void SetODSMarkoutDamages(IObjectDataSource ds)
    {
        odsMarkoutDamages = ds;
    }

    public void SetGVMarkoutDamages(IGridView gv)
    {
        gvMarkoutDamages = gv;
    }

    public void SetViewState(IViewState viewState)
    {
        _iViewState = viewState;
    }

    #endregion
}