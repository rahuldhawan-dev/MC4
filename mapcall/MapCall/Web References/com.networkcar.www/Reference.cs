//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace MapCall.com.networkcar.www {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GpsInfoSoapBinding", Namespace="http://www.networkcar.com")]
    public partial class GpsInfo : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getGpsTrackOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFleetGpsInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGpsTrackAdvancedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGpsInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GpsInfo() {
            this.Url = global::MapCall.Properties.Settings.Default.MapCall_com_networkcar_www_GpsInfo;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getGpsTrackCompletedEventHandler getGpsTrackCompleted;
        
        /// <remarks/>
        public event getFleetGpsInfoCompletedEventHandler getFleetGpsInfoCompleted;
        
        /// <remarks/>
        public event getGpsTrackAdvancedCompletedEventHandler getGpsTrackAdvancedCompleted;
        
        /// <remarks/>
        public event getGpsInfoCompletedEventHandler getGpsInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://www.networkcar.com", ResponseNamespace="http://www.networkcar.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string getGpsTrack(string username, string password, string vin, string fromDate, string toDate, string keyOffFlag) {
            object[] results = this.Invoke("getGpsTrack", new object[] {
                        username,
                        password,
                        vin,
                        fromDate,
                        toDate,
                        keyOffFlag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getGpsTrackAsync(string username, string password, string vin, string fromDate, string toDate, string keyOffFlag) {
            this.getGpsTrackAsync(username, password, vin, fromDate, toDate, keyOffFlag, null);
        }
        
        /// <remarks/>
        public void getGpsTrackAsync(string username, string password, string vin, string fromDate, string toDate, string keyOffFlag, object userState) {
            if ((this.getGpsTrackOperationCompleted == null)) {
                this.getGpsTrackOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGpsTrackOperationCompleted);
            }
            this.InvokeAsync("getGpsTrack", new object[] {
                        username,
                        password,
                        vin,
                        fromDate,
                        toDate,
                        keyOffFlag}, this.getGpsTrackOperationCompleted, userState);
        }
        
        private void OngetGpsTrackOperationCompleted(object arg) {
            if ((this.getGpsTrackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGpsTrackCompleted(this, new getGpsTrackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://www.networkcar.com", ResponseNamespace="http://www.networkcar.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string getFleetGpsInfo(string username, string password) {
            object[] results = this.Invoke("getFleetGpsInfo", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getFleetGpsInfoAsync(string username, string password) {
            this.getFleetGpsInfoAsync(username, password, null);
        }
        
        /// <remarks/>
        public void getFleetGpsInfoAsync(string username, string password, object userState) {
            if ((this.getFleetGpsInfoOperationCompleted == null)) {
                this.getFleetGpsInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFleetGpsInfoOperationCompleted);
            }
            this.InvokeAsync("getFleetGpsInfo", new object[] {
                        username,
                        password}, this.getFleetGpsInfoOperationCompleted, userState);
        }
        
        private void OngetFleetGpsInfoOperationCompleted(object arg) {
            if ((this.getFleetGpsInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFleetGpsInfoCompleted(this, new getFleetGpsInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://www.networkcar.com", ResponseNamespace="http://www.networkcar.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string getGpsTrackAdvanced(string username, string password, string vin, string fromDate, string toDate, string keyOffFlag, int fixCount, string sortDirection) {
            object[] results = this.Invoke("getGpsTrackAdvanced", new object[] {
                        username,
                        password,
                        vin,
                        fromDate,
                        toDate,
                        keyOffFlag,
                        fixCount,
                        sortDirection});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getGpsTrackAdvancedAsync(string username, string password, string vin, string fromDate, string toDate, string keyOffFlag, int fixCount, string sortDirection) {
            this.getGpsTrackAdvancedAsync(username, password, vin, fromDate, toDate, keyOffFlag, fixCount, sortDirection, null);
        }
        
        /// <remarks/>
        public void getGpsTrackAdvancedAsync(string username, string password, string vin, string fromDate, string toDate, string keyOffFlag, int fixCount, string sortDirection, object userState) {
            if ((this.getGpsTrackAdvancedOperationCompleted == null)) {
                this.getGpsTrackAdvancedOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGpsTrackAdvancedOperationCompleted);
            }
            this.InvokeAsync("getGpsTrackAdvanced", new object[] {
                        username,
                        password,
                        vin,
                        fromDate,
                        toDate,
                        keyOffFlag,
                        fixCount,
                        sortDirection}, this.getGpsTrackAdvancedOperationCompleted, userState);
        }
        
        private void OngetGpsTrackAdvancedOperationCompleted(object arg) {
            if ((this.getGpsTrackAdvancedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGpsTrackAdvancedCompleted(this, new getGpsTrackAdvancedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://www.networkcar.com", ResponseNamespace="http://www.networkcar.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string getGpsInfo(string username, string password, string vin) {
            object[] results = this.Invoke("getGpsInfo", new object[] {
                        username,
                        password,
                        vin});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getGpsInfoAsync(string username, string password, string vin) {
            this.getGpsInfoAsync(username, password, vin, null);
        }
        
        /// <remarks/>
        public void getGpsInfoAsync(string username, string password, string vin, object userState) {
            if ((this.getGpsInfoOperationCompleted == null)) {
                this.getGpsInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGpsInfoOperationCompleted);
            }
            this.InvokeAsync("getGpsInfo", new object[] {
                        username,
                        password,
                        vin}, this.getGpsInfoOperationCompleted, userState);
        }
        
        private void OngetGpsInfoOperationCompleted(object arg) {
            if ((this.getGpsInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGpsInfoCompleted(this, new getGpsInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getGpsTrackCompletedEventHandler(object sender, getGpsTrackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGpsTrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGpsTrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getFleetGpsInfoCompletedEventHandler(object sender, getFleetGpsInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFleetGpsInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFleetGpsInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getGpsTrackAdvancedCompletedEventHandler(object sender, getGpsTrackAdvancedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGpsTrackAdvancedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGpsTrackAdvancedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getGpsInfoCompletedEventHandler(object sender, getGpsInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGpsInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGpsInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591